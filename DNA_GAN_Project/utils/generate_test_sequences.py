"""
Script to generate test sequences for evaluation.

This script:
1. Generates random DNA sequences for both models
2. Saves them to the appropriate files
3. Allows testing the evaluation pipeline without running the full training
"""

import os
import random
import numpy as np
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord


def generate_random_dna_sequence(length=150, gc_bias=0.5):
    """
    Generate a random DNA sequence with optional GC bias.
    
    Args:
        length (int): Length of the sequence.
        gc_bias (float): Probability of generating G or C (0.5 means no bias).
        
    Returns:
        str: Random DNA sequence.
    """
    sequence = ""
    for _ in range(length):
        if random.random() < gc_bias:
            sequence += random.choice(['G', 'C'])
        else:
            sequence += random.choice(['A', 'T'])
    return sequence


def generate_test_sequences(output_file, num_sequences=1000, length=150, gc_bias=0.5, model_name="test"):
    """
    Generate test sequences and save them to a FASTA file.
    
    Args:
        output_file (str): Path to save the sequences.
        num_sequences (int): Number of sequences to generate.
        length (int): Length of each sequence.
        gc_bias (float): Probability of generating G or C.
        model_name (str): Name of the model for sequence IDs.
    """
    # Create output directory if it doesn't exist
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    # Generate sequences
    records = []
    for i in range(num_sequences):
        seq = generate_random_dna_sequence(length, gc_bias)
        record = SeqRecord(
            Seq(seq),
            id=f"{model_name}_{i+1}",
            description=f"Generated by {model_name} model"
        )
        records.append(record)
    
    # Save to FASTA file
    with open(output_file, 'w') as f:
        SeqIO.write(records, f, "fasta")
    
    print(f"Generated {num_sequences} sequences and saved to {output_file}")


def main():
    """
    Main function to generate test sequences for both models.
    """
    # Generate sequences for Gumbel-Softmax GAN
    generate_test_sequences(
        "data/gumbel_generated_sequences.fasta",
        num_sequences=1000,
        length=150,
        gc_bias=0.45,  # Slightly lower GC content
        model_name="gumbel"
    )
    
    # Generate sequences for Improved WGAN-GP
    generate_test_sequences(
        "data/improved_generated_sequences.fasta",
        num_sequences=1000,
        length=150,
        gc_bias=0.52,  # Slightly higher GC content
        model_name="improved"
    )
    
    print("Test sequences generated successfully.")


if __name__ == "__main__":
    main()
